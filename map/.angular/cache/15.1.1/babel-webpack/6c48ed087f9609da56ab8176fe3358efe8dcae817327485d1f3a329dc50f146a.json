{"ast":null,"code":"import * as Leaflet from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@asymmetrik/ngx-leaflet\";\nLeaflet.Icon.Default.imagePath = 'assets/';\nexport class MapComponent {\n  constructor() {\n    this.markers = [];\n    this.options = {\n      layers: [Leaflet.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n      }), Leaflet.tileLayer.wms('http://ows.mundialis.de/services/service?', {\n        layers: 'SRTM30-Colored-Hillshade'\n      })],\n      zoom: 8,\n      center: {\n        lng: 20.17579828033186,\n        lat: 50.43817144362623\n      }\n    };\n  }\n  initializeData() {\n    const features = this.featureColletion.features;\n    for (let i = 0; i < features.length; i++) {\n      const feature = features[i];\n      let properties = feature.properties ?? {};\n      Leaflet.geoJSON(feature).addTo(this.map).bindTooltip(properties['tooltip']).bindPopup(`<b>${properties['description']}</b>`);\n    }\n  }\n  onMapReady($event) {\n    this.map = $event;\n    this.initializeData();\n  }\n  mapClicked($event) {\n    console.log($event.latlng.lat, $event.latlng.lng);\n  }\n  markerClicked($event, index) {\n    console.log($event.latlng.lat, $event.latlng.lng);\n  }\n  markerDragEnd($event, index) {\n    console.log($event.target.getLatLng());\n  }\n  // example of creating draggable marker\n  generateMarker(data, index) {\n    return Leaflet.marker(data.position, {\n      draggable: data.draggable\n    }).on('click', event => this.markerClicked(event, index)).on('dragend', event => this.markerDragEnd(event, index));\n  }\n  // example of creating polyline\n  generatePolyline() {\n    var polyline = Leaflet.polyline([{\n      lat: 28.625485,\n      lng: 79.821091\n    }, {\n      lat: 28.625293,\n      lng: 79.817926\n    }, {\n      lat: 28.625182,\n      lng: 79.81464\n    }]);\n    polyline.addTo(this.map);\n  }\n}\nMapComponent.ɵfac = function MapComponent_Factory(t) {\n  return new (t || MapComponent)();\n};\nMapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MapComponent,\n  selectors: [[\"app-map\"]],\n  inputs: {\n    featureColletion: \"featureColletion\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[\"leaflet\", \"\", 1, \"map-container\", 3, \"leafletOptions\", \"leafletMapReady\", \"leafletClick\"]],\n  template: function MapComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵlistener(\"leafletMapReady\", function MapComponent_Template_div_leafletMapReady_0_listener($event) {\n        return ctx.onMapReady($event);\n      })(\"leafletClick\", function MapComponent_Template_div_leafletClick_0_listener($event) {\n        return ctx.mapClicked($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"leafletOptions\", ctx.options);\n    }\n  },\n  dependencies: [i1.LeafletDirective],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Leaflet","Icon","Default","imagePath","MapComponent","constructor","layers","tileLayer","attribution","wms","zoom","center","lng","lat","initializeData","features","featureColletion","i","length","feature","properties","geoJSON","addTo","map","bindTooltip","bindPopup","onMapReady","$event","mapClicked","console","log","latlng","markerClicked","index","markerDragEnd","target","getLatLng","generateMarker","data","marker","position","draggable","on","event","generatePolyline","polyline","selectors","inputs","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["D:\\Projects\\nginx-auth-demo\\map\\src\\app\\map\\map.component.ts","D:\\Projects\\nginx-auth-demo\\map\\src\\app\\map\\map.component.html"],"sourcesContent":["import { Component, Input } from '@angular/core';\nimport * as Leaflet from 'leaflet';\n\nLeaflet.Icon.Default.imagePath = 'assets/';\n\n@Component({\n  selector: 'app-map',\n  templateUrl: './map.component.html',\n  styleUrls: ['./map.component.css']\n})\nexport class MapComponent {\n\n  @Input()\n  featureColletion!: GeoJSON.FeatureCollection;\n\n  map!: Leaflet.Map;\n\n  markers: Leaflet.Marker[] = [];\n\n  options = {\n    layers: [\n      Leaflet.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n      }),\n      Leaflet.tileLayer.wms('http://ows.mundialis.de/services/service?', {\n        layers: 'SRTM30-Colored-Hillshade'\n      }),\n    ],\n    zoom: 8,\n    center: { lng: 20.17579828033186, lat: 50.43817144362623 }\n  }\n\n  initializeData() {\n    const features = this.featureColletion.features;\n    for (let i = 0; i < features.length; i++) {\n      const feature: GeoJSON.Feature = features[i];\n      let properties = feature.properties ?? {};\n\n      Leaflet.geoJSON(feature).addTo(this.map)\n       .bindTooltip(properties['tooltip'])\n       .bindPopup(`<b>${properties['description']}</b>`)\n    }\n  }\n\n  onMapReady($event: Leaflet.Map) {\n    this.map = $event;\n    this.initializeData();\n  }\n\n  mapClicked($event: any) {\n    console.log($event.latlng.lat, $event.latlng.lng);\n  }\n\n  markerClicked($event: any, index: number) {\n    console.log($event.latlng.lat, $event.latlng.lng);\n  }\n\n  markerDragEnd($event: any, index: number) {\n    console.log($event.target.getLatLng());\n  }\n\n  // example of creating draggable marker\n  generateMarker(data: any, index: number) {\n    return Leaflet.marker(data.position, { draggable: data.draggable })\n      .on('click', (event) => this.markerClicked(event, index))\n      .on('dragend', (event) => this.markerDragEnd(event, index));\n  }\n\n  // example of creating polyline\n  generatePolyline() {\n    var polyline = Leaflet.polyline([{ lat: 28.625485, lng: 79.821091 }, { lat: 28.625293, lng: 79.817926 }, { lat: 28.625182, lng: 79.81464 }]);\n    polyline.addTo(this.map);\n  }\n\n}\n","<div class=\"map-container\"\n  leaflet\n  [leafletOptions]=\"options\"\n  (leafletMapReady)=\"onMapReady($event)\"\n  (leafletClick)=\"mapClicked($event)\">\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}